name: K8s Tests

on:
  workflow_dispatch:
    inputs:
      envProfile:
        description: "Maven profile to run in K8s (dev|stage|prod)"
        required: false
        default: "stage"
  push:
    branches: [ main, master ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: docker build -t ghcr.io/${{ github.repository }}:${{ github.sha }} .

      - name: Push image
        run: docker push ghcr.io/${{ github.repository }}:${{ github.sha }}

      - name: Set image tag output
        id: meta
        run: echo "tag=ghcr.io/${GITHUB_REPOSITORY}:${GITHUB_SHA}" >> $GITHUB_OUTPUT

  run-on-k8s:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # kubectl & helm
      - uses: azure/setup-kubectl@v4
        with: { version: 'v1.30.0' }
      - uses: azure/setup-helm@v4

      # Provide cluster access; store kubeconfig in a secret
      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${KUBE_CONFIG}" > ~/.kube/config
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

      - name: Create namespace / RBAC / config
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/serviceaccount.yaml
          kubectl apply -f k8s/configmap-env.yaml
          kubectl apply -f k8s/secret-env.yaml

      - name: Deploy Job with Helm
        run: |
          helm upgrade --install qa-runner ./k8s/helm/qa-runner \
            --namespace qa --create-namespace \
            --set image.repository=ghcr.io/${{ github.repository }} \
            --set image.tag=${{ needs.build-and-push.outputs.image-tag##*: }} \
            --set envProfile=${{ github.event.inputs.envProfile || 'stage' }}

      - name: Wait for Job completion
        run: |
          kubectl wait --for=condition=complete job/qa-runner -n qa --timeout=30m || \
          (echo "Job did not complete; dumping logs" && kubectl logs -l app=petstore-tests -n qa --all-containers --tail=-1 ; exit 1)

      - name: Find test pod
        id: pod
        run: |
          POD=$(kubectl get pods -n qa -l job-name=petstore-tests -o jsonpath='{.items[0].metadata.name}')
          echo "pod=$POD" >> $GITHUB_OUTPUT

      - name: Copy Allure results from pod
        run: |
          mkdir -p artifacts/allure-results artifacts/surefire
          kubectl cp -n qa "${{ steps.pod.outputs.pod }}":/app/target/allure-results artifacts/allure-results || true
          kubectl cp -n qa "${{ steps.pod.outputs.pod }}":/app/target/surefire-reports artifacts/surefire || true

      - name: Upload raw artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k8s-allure-results
          path: artifacts/allure-results

      - name: Build Allure HTML
        if: always()
        uses: simple-elf/allure-report-action@v1.8
        with:
          allure_results: artifacts/allure-results
          allure_report: artifacts/allure-report
          keep_reports: 1

      - name: Upload Allure HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k8s-allure-report
          path: artifacts/allure-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}